<%@ Page Title="Junior Tester. Школа тестинга. Михаил Портнов. Классификация багов..." Language="C#" MasterPageFile="~/School/School.master" AutoEventWireup="true" CodeFile="SeverityOfABug.aspx.cs" Inherits="School_SeverityOfABug" %>

<asp:Content ID="Content1" ContentPlaceHolderID="head" Runat="Server">
    <meta name="description" content="Severity и priority багов" />
    <meta name="keywords" content="тестирование, определение, Critical, Serious, Minor, Enhancement, workaround, data corruption, crash, hang, fatal, Suggestion" />
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolderText" Runat="Server">
      <p><H2>КЛАССИФИКАЦИЯ БАГОВ.</H2></p>

      <p align="center"><a href="mailto:info@portnov.com"><font face="Times New Roman, Times, serif" size="3">Михаил 
        Портнов</font></a><font face="Times New Roman, Times, serif" size="3">. 
        Директор <a href="http://www.portnov.com" target="_blank">Portnov Computer School</a>.</font><font face="Times New Roman, Times, serif" size="3"> 
        </font></p>

        <p class="text">При формальном 
          описании проблемы среди прочего необходимо определить <b>severity</b> 
          и <b>priority</b> этой проблемы.</p>
	<p class="text"><b>Severity</b> характеризует насколько 
          серьезна проблема с точки зрения ущерба функциональности. Эту классификацию 
          должен провести тестер, открывающий баг в базе данных.</p>
	<p class="text"><b>Priority</b> 
          упорядочивает порядок, в котором баги чинятся программистом. Тестер 
          не может и не должен вмешиваться в этот процесс. Пусть этим займется 
          менеджер программиста. Он лучше знает кто и чем должен заниматься в 
          его команде. В том числе, и кому придется чинить проблему.</p>
        <p class="text">Очень важно понимать 
          разницу между этими двумя типами классификации и не путаться в них.</p>
        <p class="text">Мне довелось работать 
          в шести софтверных компаниях - маленьких стартапах и в таких гигантах 
          индустрии как Лотус и Борланд. С одной стороны, каждая компания имеет 
          свои взгляды на систему классификации как по priority, так и по severity. 
          Но, что любопытно, несмотря на различия в используемых названиях категорий 
          и их количестве, все, что мы можем сказать о severity прекрасно умещается 
          всего в четыре категории:</p>
        <p class="text"><b>Critical</b> 
          - проблемы, которые не могут быть обойдены пользователем даже с помощью 
          звонка в TechSupport. Нет возможности выкрутиться по ходу дела и завершить 
          работу. Отсутствует <b><u><i>workaround</i></u></b>. Другое часто встречающееся 
          название для этой группы - <b><u><i>fatal</i></u></b>. К этой категории 
          относятся все проблемы, ведущие к потере информации - <b><u><i>data 
          corruption, crash, hang</i></u></b> (зависание системы) и проч.</p>
        <p class="text"><b>Serious</b> 
          - серьезное функциональное нарушение, которое можно в принципе обойти 
          и завершить выполняемую операцию.</p>
        <p class="text"><b>Minor</b> - 
          Это то, что не мешает пользователю работать, но создает мелкие неудобства 
          или действует на нервы. Речь не идет об усовершенствовании продукта. 
          Мы говорим именно о ПРОБЛЕМАХ на уровне стандартов или технического 
          задания. Сюда относятся в первую очередь проблемы user interface, но 
          не только.</p>
        <p class="text"><b>Enhancement</b> 
          - тут мы имеем ввиду все то, что не является нарушением техзадания, 
          но поможет сделать продукт лучше, удобнее в пользовании. Иногда используют 
          слово <i><b><u>Suggestion</u></b></i>.</p>
        <p class="text">Можно иметь больше, 
          чем четыре категории, но они не добавляют особой ценности. Когда я пришел 
          работать в Лотус, то первым делом полез в Bug Tracking System и начал 
          пытать менеджера почему там восемь категорий и где между ними граница. 
          Категории вообще не имели названий, а шли по номерам - 1, 2, 3 и так 
          далее до 8. Тот "почесал репу" и сказал так "Первые три категории будут 
          чинить, а остальные нет. Так что, используй свою интуицию и не перенапрягайся 
          по этому вопросу". Как мы видим, категорий оказалось все равно четыре 
          - 1, 2, 3, и все остальные.</p>
        <p class="text">Еще пару слов о 
          соотношении <b>severity</b> и <b>priority</b>. Посмотрим на такую проблему:</p>
      <blockquote>
	<p class="text">При 
          попытке сохранить файл выскакивает <i><b><u>message box</u></b></i> 
          с вопросом "Do you really want to save that file?" Пользователь нажимает 
          кнопочку YES, а сообщение выскакивает снова. Он опять нажимает кнопочку, 
          но сообщение его преследует. После дясятка безуспешных попыток пользователь 
          звонит в TechSupport и спрашивает в чем дело. Ему культурно объясняют, 
          что это известная проблема и все что нужно - это продолжать нажимать 
          кнопочку. И действительно - на 20-м или около того нажатии файл сохраняется. 
          Эта проблема идет по разряду <b>Serious</b> а не <b>Critical</b>, потому, 
          что у нее есть <i><b><u>workaround</u></b></i>, то есть, можно выкрутиться. 
          С точки зрения менеджера проекта эта же проблема получит priority High 
          (считаем, что у нас есть high, medium, low), потому что с такими проблемами 
          компания станет всеобщим посмешищем.</p>
      </blockquote>
        <p class="text">Таким образом, 
          к самому высокому уровню priority может вполне относиться проблема с 
          не самым высоким уровнем severity. И наоборот, какой-нибудь экзотический 
          crash, на который в реальной жизни крайне сложно наткнуться, может иметь 
          относительно низкий приоритет в починке по сравнению с проблемой в интерфейсе, 
          которая мгновенно бросается в глаза.</p>
		<br />
</asp:Content>

