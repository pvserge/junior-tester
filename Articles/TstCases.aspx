<%@ Page Language="C#" MasterPageFile="~/Articles/Articles.master" AutoEventWireup="true" CodeFile="TstCases.aspx.cs" Inherits="Articles_TstCases" Title="Junior Tester. Статьи. Test Cases. Простые и сложные..." %>

<asp:Content ID="Content1" ContentPlaceHolderID="head" Runat="Server">
    <meta name="description" content="Жизненный цикл разработки програмного обеспечения.">
    <meta name="keywords" content="тест кейсы, тестовые примеры, test cases, простые тест кейсы, сложный тест кейсы, тест, бета-тестирование, програмное обеспечение, программы, тестер, web-тестер, веб-тестер, тестинг,софт,software test, бесплатно, начинающему вебтестеру, документация, стандарты, литература, ссылки, ресурсы для веб-тестера">
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolderText" Runat="Server">
      <p class="name">Test Cases. Простые и сложные.</p>
	<p class="text">Составление и написание 
          Test Cases (тестовых примеров) является одним из ключевых моментов тестирования. 
          Этому вопросу уделяют много внимания в различных публикациях по тематике 
          тестирования. Мы не будем останавливаться на определении и правилах 
          составления Test Cases. Цель этой статьи - дать не совсем обычный взгляд 
          на проблему.</p>
	<p class="text">Мы неоднократно сталкивались с различными мнениями по этому вопросу. В одной из конференций 
          была развернута целая дискуссия на эту тему. Как обычно мнения разделились.</p>
	<p class="text">Составление Test 
          Cases помимо всех благ имеет и один существенный недостаток - время 
          на написание. Именно на написание, т.к. разработка их в том или ином 
          виде все же имеется в большинстве случаев.</p>
	<p class="text">Возьмем такой вариант: 
          мелкая софтверная компания. Выдержать конкуренцию на рынке можно производством 
          софта хорошего качества в кратчайший срок. Необходимость тестирования 
          очевидна, но время решает все. Разработчику всегда проще написать код, 
          чем документацию к нему. И, если за 1 месяц он подготовит продукт к 
          передаче на тестирование, то с написанием документации этот срок растянется 
          на 1,5 - 2 мес. Любая задержка в разработке - сокращение сроков на тестирование. 
          Первое, возможно ошибочное, но часто принимаемое решение - не писать 
          документацию. Для тестировщика в этом случае есть только один выход 
          - разработка Test Cases по ходу изучения продукта, как только он будет 
          передан на тестирование.</p>
	<p class="text">В этой ситуации 
          (имеется в виду очень малый срок разработки или, например, работа малой 
          команды над очень крупным проектом) тестировщику на разработку и написание 
          Test Cases потребуется неоправданно (особенно, если так считает руководство) 
          много времени. Убеждать руководство в большинстве случаев - так же трата 
          времени (притом за частую неоправданная). Что можно предпринять в данной 
          ситуации?</p>
	<p class="text">На наш взгляд, 
          альтернативой может быть формулирование цели каждого Test Cases (не 
          полное и подробное его описание, а именно формулирование того, что должно 
          проверить). Такой список позволит не упустить чего-либо при проверке 
          и вместе с тем даст возможность сэкономить время на "писанине".</p>
	<p class="text">И еще одна мысль. 
          В программах с пошаговым интерфейсом (а его элементы присутствуют во 
          многих программных продуктах), где переход на следующий шаг возможен 
          только после выполнения всех "обязательных" действий на предыдущем, 
          на наш взгляд, можно использовать сложные (или составные) Test Cases.</p>
	<p class="text">Т.е. если в некоторой программе 
          в окне ШАГ_1 кнопка ШАГ2 становится доступной только после верного заполнения 
          ПОЛЯ1, то проведя такой тест:</p>
      <ol class="decimal">
        <li>Запустить программу (предположим, что при старте сразу попадаем на окно ШАГ_1).</li>
        <li>Заполнить ПОЛЕ1.</li>
        <li>Нажать кнопку ШАГ2.</li>
        <li>Завершить работу с программой.</li>
      </ol>
	<p class="text">при включении в 
          него необходимых проверок, можно "убить" сразу целую "кучу" зайцев:</p>
      <ol class="decimal">
        <li>Проверить наличие окна ШАГ_1 при старте программы.</li>
        <li>Проверить наличие ПОЛЯ1 в окне ШАГ1.</li>
        <li>Проверить наличие кнопки ШАГ2 и смогу убедится, что она не доступна.</li>
        <li>Проверить позволяет ли ПОЛЕ1 принимать нужное значение.</li>
        <li>Проверить становится ли кнопка ШАГ2 доступной после п.4</li>
        <li>Проверить, что при нажатии на кнопку ШАГ2 программа продолжает работу 
            корректно.</li>
      </ol>
	<p class="text">Если какой-то из 
          элементов верификации при проведении этого Test Case отсутствует - программу 
          можно считать "не рабочей", так как дальнейшее ее использование не возможно 
          (эта версия программы будет "передана на доработку"). Мы ведем речь 
          в основном о "ручном" тестировании. Хотя при включении элементов верификации 
          по каждому из этих пунктов позволяет использовать этот Test Case и для 
          автоматизации (по меньшей мере приемочных тестов).</p>
	<p class="text">На наш взгляд, 
          Test Cases можно разделить на <b>простые</b> и <b>сложные (или составные)</b>. 
          Под &quot;простым" мы понимаем такой Test Case, который на ряду с начальным 
          (приведение программы в необходимое состояние) и конечным (перевод программы 
          в исходное состояние) элементами имеет только один элемент верификации. 
          "Составным" же можно назвать такой Test Case, который по мимо начального 
          и конечного элементов включал бы в себя 2 и более элементов верификации.</p>
	<p class="text">Простые Test Cases 
          можно рассматривать как некий "идеальный" вариант, к которому нужно 
          стремиться. Он с успехом подойдет крупной или средней компании с хорошим 
          финансированием, четкими сроками, достаточным количеством сотрудников 
          и грамотно поставленным документооборотом.</p>
	<p class="text">Сложные (составные) 
          Test Cases - альтернативный выход для мелких фирм с запутанными (или 
          резко ограниченными) сроками, отсутствием документооборота и недостаточным 
          штатом сотрудников.</p>
	<p class="sub2_top">
	См. также:<br>
           <a class="sub2_top" href="/Theory/Testing/index.htm">Тестинг.</a> <a class="sub2_top" href="/Theory/Testing/testcases.htm">Test Cases.</a><br>
           <a class="sub2_top" href="/School/index.htm">Школа.</a> <a class="sub2_top" href="/School/test_case.htm">Тест кейсы и тест свиты.</a><br>
           <a class="sub2_top" href="/School/index.htm">Школа.</a> <a class="sub2_top" href="/School/why_test_cases.htm">Кому нужны тест кейсы?</a><br>
	</p>
	<br>
</asp:Content>

