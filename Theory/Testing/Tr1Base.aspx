<%@ Page Title="Junior Tester. Конспект. Тестинг. Трекинг. Основы..." Language="C#" MasterPageFile="~/Theory/Testing/TheoryTesting.master" AutoEventWireup="true" CodeFile="Tr1Base.aspx.cs" Inherits="Theory_Testing_Tr1Base" %>

<asp:Content ID="Content1" ContentPlaceHolderID="head" Runat="Server">
    <meta name="description" content="Тестинг и трекинг." />
    <meta name="keywords" content="баги, ошибки, feature, фичи, програмное обеспечение, программы, тестер, база данных, тестинг, софт, software test, бесплатно, начинающему тестеру, документация, определение трекинга, классификация, отчет о проблеме, ресурсы для тестера" />
</asp:Content>

<asp:Content ID="Content2" ContentPlaceHolderID="ContentPlaceHolderText" Runat="Server">
      <p class="name">Трекинг. Часть I. Основы.</p>
			<p align="left">
				<a class="sub2_top" href="/Theory/Testing/Tr1Base.aspx#vve">Введение</a><br> 
				<a class="sub2_top" href="/Theory/Testing/Tr1Base.aspx#opr">  Определение</a><br> 
				<a class="sub2_top" href="/Theory/Testing/Tr1Base.aspx#brp">  Bug report (пункты)</a><br>
				<a class="sub2_top" href="/Theory/Testing/Tr1Base.aspx#brd">  Bug report (детали)</a>
			</p>
      <p><a name=vve></a><H4>Введение.</H4></p>
        <p class="text">Думаю, буду не далек от истины, если возьмусь утверждать, что главной деятельностью тестировщика является обнаружение багов. Но ошибку мало найти. О найденной проблеме нужно сообщить программисту, который затем исправит ее, или другому ответственному за это члену команды. Однако и это еще не все: После того как ошибка исправлена, необходимо будет провести тест, который выявлял ее ранее, еще раз - чтобы убедится, что это исправление действительно имеет место, кроме того необходимо будет провести целый набор тестов для того, чтобы удостоверится в том, что сделанное исправление не нарушило работу других частей программы.  Не буду углубляться в дальнейший процесс тестирования - это удел других статей. Цель этой статьи несколько иная - разобраться в том, что же делать с обнаруженным багом, а точнее из чего состоит отчет о проблеме. Эта статья - первая из цикла <Трекинг>.</p>
      <p class="text"><a name=opr></a><H4>Определение.</H4></p>
        <p class="text">Вначале определимся, что такое отчет о проблеме (Bug Report) и в чем состоит отслеживание проблем (bug tracking).</p>
	<p class="text">Итак, отслеживание проблемы (bug tracking) в простейшем варианте - это процесс, включающий в себя обнаружение ошибки, ее описание, исправление и проверку этого исправления, т.е. процесс <слежения> за багом в течение всего как его жизненного цикла, так и жизненного цикла разработки в целом.</p>
	<p class="text">Отчет о проблеме - это по сути его описание. Из каких элементов состоит это описание, как правильно составлять отчет о проблеме и какие системы отслеживания существуют я и попробую рассказать в серии статей, первую из которых Вы сейчас читаете.</p>
      <p class="text"><a name=brp></a><H4>Bug report (пункты).</H4></p>
        <p class="text">Итак, тест проведен, ошибка найдена, при этом сомнений в том, что ошибка имеет место - нет. Что делать дальше? Необходимо сообщить разработчику (программисту) о том, что ошибка найдена, т.е. написать отчет о проблеме (bug report).</p>
	<p class="text">Что необходимо писать в таком отчете? Давайте попробуем разобраться...</p>
        <p class="text">Прежде всего следует помнить о том, что составленный отчет может, а скорее всего и будет, подвергаться изменениям не только тестером, но и другими членами команды. Кроме того, отчет может быть составлен как на бумаге, так и с помощью специально созданных для этого программ - систем отслеживания проблем (bug tracking system), в зависимости от чего некоторые пункты описания проблемы могут отличаться (например, в бумажном варианте будет присутствовать графа подписей, а в электронном - отметка о нотификации). Исходя из этого, давайте попробуем составить некий универсальный список пунктов (граф) отчета:</p>
        <ol class="decimal">
          <li><a href="/Theory/Testing/Tr1Base.aspx#prog">Название тестируемой программы (Program).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#vers">Номер версии тестируемой программы (Version).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#bild">Номер ее сборки (Build).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#area">Функциональная область (Area).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#repb">ФИО лица, составившего отчет (Reported by).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#date">Дата составления (Date).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#lmod">Дата последней модификации (Last modify).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#svrt">Серьезность проблемы (Severity).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#prrt">Приоритет (Priority).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#stat">Статус (состояние) (Status).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#prbt">Тип отчета (Problem type).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#rcrr">Повторяемость (Recurrence)</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#iden">Идентификатор (Identifier).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#desc">Краткое описание (Description).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#rprt">Детальное описание (Report).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#sttr">Шаги воспроизведения (Steps to recreate).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#work">Обходной путь (Workaround).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#conf">Конфигурация (Configuration).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#atta">Аттачмент (приложения) (Attachment).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#dlgt">Поручено (Delegated).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#comm">Комментарии (Comments).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#rslt">Резолюция (Resolution).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#deff">Отложено (Deffered).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#notf">Подпись (нотификация для электронного варианта) (Signature/Notify).</a></li>
          <li><a href="/Theory/Testing/Tr1Base.aspx#hist">История (History).</a></li>
         </ol>
        <p class="text">В моей практике нет случаев использования бумажных вариантов отчета о проблеме (за исключением распечатки электронных версий), поэтому вышеприведенный список хотя и включает пункты характерные для бумажных форм, все же больше ориентирован на электронные версии. Перечисленные пункты  имеются в большинстве систем трекинга, хотя названия могут несколько отличаться.</p>

      <p class="text"><a name=brd></a><H4>Bug report (детали).</H4></p>
        <p class="text">Давайте остановимся на каждом из пунктов подробнее. При описании попробуем придерживаться следующего плана: интерпретация поля, различия в бумажной и электронной системе трекинга, кем вносится, кем модифицируется.</p>

        <p class="text"><a name=prog></a><H3>Название тестируемой программы.</H3></p>
                <p class="text">Думаю с этим пунктом все достаточно ясно. Прежде чем составлять отчет, необходимо указать, в какой именно программе найдена описываемая проблема. Особенно это касается тех случаев, когда ведется несколько параллельных разработок. При использовании бумажной системы трекинга в этом случае заполняется соответствующая графа отчета, а при работе с электронной системой трекинга - выбирается соответствующий параметр из списка тестируемых программ (program under test).</p>
                <p class="text">Вносится - тестировщиком.</p>
		<p class="text">Модифицируется - тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=vers></a><H3>Номер версии тестируемой программы.</H3></p>
                <p class="text">Очевидно, что обнаруживаемые проблемы будут разниться не только в различных программах, но и в различных версиях одного и того же программного продукта. Например,  часть багов при получении новой версии будет исправлена, а добавленная новая функциональность неизбежно приведет к появлению новых проблем. В этом случае и тестировщику, и остальным членам команды важно знать не только название тестируемого ПО, но и его версию.  Это поможет не только определится с тем, какие ошибки имели место в данное версии, но и даст возможность решить ряд спорных моментов,  касающихся наличия описываемого в программе бага в дальнейшем. Кроме того - упростит сбор статистических данных.</p>
         	<p class="text">Так же как и с предыдущим пунктом при использовании бумажной системы трекинга в этом случае заполняется соответствующий граф отчета, а при работе с электронной системой трекинга - выбирается соответствующий параметр из списка.</p>
         	<p class="text">Вносится в первую очередь самим тестировщиком, а в большинстве случаев - только им.</p>
                <p class="text">Модифицируется - тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=bild></a><H3>Номер сборки программы.</H3></p>
                <p class="text">Кроме названия и версии программы немаловажную роль играет и номер ее сборки. Баг, обнаруженный в одной сборке может отсутствовать в другой и т.д.  Все сказанное выше о номере версии  справедливо и для ее сборки. Кроме того, эта информация может иметь важное значение, особенно в спорных случаях (например, если проблема не воспроизводится программистом и требуется вернуться к той сборке, в которой она существовала). </p>
         	<p class="text">В бумажной версии - заполняется соответствующая графа.</p>
         	<p class="text">В электронной - выбирается из списка доступных сборок.</p>
                <p class="text">Вносится - тестировщиком.</p>
                <p class="text">Модифицируется - тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>
                <p class="text">Сам процесс нумерации версии, ее сборок, отслеживания изменений в них и т.п. не является материалом данной статьи, и  поэтому перейдем к следующему пункту.</p>

        <p class="text"><a name=area></a><H3>Функциональная область.</H3></p>
                <p class="text">В сложных программах, например в приложениях типа клиент-сервер, зачастую выделяют несколько функциональных областей, каждая из которых кроме присущих только ей  функций может иметь свой интерфейс и целый ряд других особенностей. Это позволяет не только четко спланировать процесс разработки, но и помогает локализовать обнаруженную проблему. Указав функциональную область программы, в которой найден баг, тестировщик облегчает локализацию проблемы и ее исправление.</p>
         	<p class="text">В бумажной версии - заполняется соответствующая графа.</p>
         	<p class="text">В электронной - выбирается из списка доступных областей.</p>
                <p class="text">Вносится - тестировщиком.</p>
                <p class="text">Модифицируется - тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=repb></a><H3>ФИО лица составившего отчет.</H3></p>
                <p class="text">Думаю, что тут тоже все достаточно ясно. Здесь указывается фамилия и инициалы того, кто обнаружил и сообщил о проблеме.</p>
         	<p class="text">В электронных многопользовательских системах, где каждый разработчик/тестировщик имеет собственный аккаунт, этот пункт может заполнятся автоматически на основании  регистрационных данных. Т.е. Вы если вошли под своим аккаунтом и описываете новый баг, то в этом поле автоматически появляется Ваше имя, введенное при регистрации.</p>
         	<p class="text">Мне попадались системы, где вместо имени/фамилии использовался username аккаунта, которой может не иметь ничего общего с реальным именем. На мой взгляд, такой подход не очень удобен.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт.</p>
                <p class="text">В электронной - вносится автоматически, используя регистрационные данные, или выбирается из списка в однопользовательских системах трекинга.</p>
                <p class="text">Вносится - тестировщиком или автоматически.</p>
                <p class="text">Модифицируется - чаще всего не модифицируется или модифицируется тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=date></a><H3>Дата составления.</H3></p>
                <p class="text">Думаю, что здесь так же все ясно. Эта информация может понадобиться как на "разборе полетов", так и при дальнейшей работе с данной проблемой. Обычно вносится автоматически при создании нового отчета.</p>
         	<p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
         	<p class="text">В электронной - вносится автоматически.</p>
                <p class="text">Вносится - автоматически при составлении отчета тестировщиком.</p>
                <p class="text">Модифицируется - чаще всего не модифицируется или модифицируется тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=lmod></a><H3>Дата последней модификации.</H3></p>
                <p class="text">Для только что внесенного отчета дата в этом поле будет совпадать с датой составления, но при работе с багом, описанным ранее, данная дата будет говорить о том, когда в последний раз вносились изменения в описание данной проблемы или в комментарий к ней. Формат обоих дат, как правило, индивидуален и зависит от сервера, на котором расположена система трекинга. Важно, чтобы он (формат) для всех дат был одинаков.</p>
         	<p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
         	<p class="text">В электронной - вносится автоматически.</p>
                <p class="text">Вносится - автоматически при составлении отчета тестировщиком.</p>
         	<p class="text">Модифицируется - чаще всего не модифицируется или модифицируется тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>

        <p class="text"><a name=svrt></a><H3>Серьезность проблемы (Severity).</H3></p>
                <p class="text">Данный пункт позволяет классифицировать баги по их серьезности, т.е. на сколько сильно данная проблема "вредит" функциональности. Перечень Severity и их количество может варьироваться в различных компаниях. Наиболее употребительными могут быть следующие:</p>
                 <ol class="decimal">
                  <li>Fatal (Critical, Causing crash) - проблемы, приводящие к зависанию и/или разрушению системы, потере данных, не имеющие workaround и т.д.</li>
                  <li>Serious  - ошибки в функциональности имеющие workaround.</li>
                  <li>Minor (Cosmetic) - мелкие ошибки не мешающие работе программы.</li>
                  <li>Suggestion (Enhancement) - предложение по улучшению (например, интрефейса).</li>
                  <li>Question (Вопрос) - отчет о проблеме, если существует сомнение в том, является ли описываемая ситуация багом (например, в документации не описано поведение программы в данной ситуации и тестировщик сомневается, является ли полученный в ходе тестирования результат правильным).</li>
                 </ol>
                <p class="text">Кроме того, Severity могут вообще не иметь названия, а быть просто пронумерованы.</p>
         	<p class="text">Последние два значения (Suggestion и Question) могут входить в состав графы Тип отчета, если таковая присутствует в используемой системе трекинга (подробнее см. ниже).</p>
         	<p class="text">Более подробно об этом очень важном пункте в отчете о проблеме можно почитать на сайте в разделах <a href="/Articles/Status.aspx">Статьи. К вопросу о ведении базы.</a> и <a href="/School/SeverityOfABug.aspx">Школа. Классификация багов.</a></p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - выбирается из списка.</p>
                <p class="text">Вносится - тестировщиком.</p>
                <p class="text">Модифицируется - чаще всего не модифицируется или модифицируется тем, кто внес или уполномоченным лицом (руководителем или менеджером).</p>


        <p class="text"><a name=prrt></a><H3>Приоритет (Priority).</H3></p>
                <p class="text">Данный параметр определяет, в какой последовательности найденный проблемы будут исправляться программистом. В первую очередь исправляются проблемы с более высоким приоритетом. Так же как и в случае с серьезностью проблемы названия приоритетов и их количество могут отличаться в различных компаниях и системах трекинга или они могут вообще не иметь названия, а быть просто пронумерованы. При этом наивысший приоритет, как правило, будет иметь наименьший номер. Чаще всего используются 4 приоритета:</p>
                  <ol class="decimal">
                   <li>Очень высокий (very high) - ошибки с этим приоритетом исправляются в первую очередь.</li>
                   <li>Высокий (high) - исправляются после того, как ликвидированы все ошибки very high.</li>
                   <li>Низкий (low) - проблемы с таким приоритетом "чинятся" по мере возможности.</li>
                   <li>Очень низкий (very low) - исправление этих ошибок может быть отложено на неопределенный срок, если останется на них время.</li>
                  </ol>
                <p class="text">или 3:</p>
                  <ol class="decimal">
                   <li>Высокий - исправления производятся немедленно после обнаружения.</li>
                   <li>Средний - исправления могут быть отложены до следующей версии.</li>
                   <li>Низкий - исправления будут сделаны в последнюю очередь или могут быть отложены на неопределенный срок.</li>
                  </ol>                                       
              	<p class="text">Сэм Канер с соавторами в своей книге "Тестирование программного обеспечения" пишет об использовании 5-10 бальной системы приоритетов, при этом приводит в качестве примера 6-ти бальную систему:<br>
              	"(1) Исправить немедленно - ошибка задерживает работу других сотрудников.<br>
              	(2) Исправить как можно быстрее.<br>
              	(3) Исправить в текущей версии (альфа, бета и т.д.).<br>
              	(4) Исправить до выхода окончательной версии.<br>
              	(5) Исправить, если возможно.<br>
              	(6) Не обязательно - сделайте, как посчитаете нужным."</p>
                <p class="text">Более подробно о приоритетах можно почитать на сайте в разделах <a href="/Articles/Status.aspx">Статьи. К вопросу о ведении базы.</a> и <a href="/School/SeverityOfABug.aspx">Школа. Классификация багов.</a></p>
         	<p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - выбирается из списка.</p>
                <p class="text">Вносится - только руководителем проекта или менеджером.</p>
                <p class="text">Модифицируется - руководителем проекта или менеджером.</p>


        <p class="text"><a name=stat></a><H3>Статус (состояние) (Status).</H3></p>
                <p class="text">Статус позволяет определить, на какой стадии своего жизненного цикла находится баг. Иными словами статус характеризует, на какой стадии в настоящий момент находится работа над багом. Кроме того, в электронных системах трекинга данное поле может использоваться для составления фильтров, с помощь которых пользователями системы будет вестись поиск багов в зависимости от их роли в проекте. Например, программист будет вести поиск по статусам Новый (New (Open)) и Переделать (Re-do (Re-open)), а тестер - по статусу Исправлено (Fixed (Added)) и т.д.</p>
                <p class="text">Так же как и Severity и Priority названия статусов могут варьироваться от компании к компании. На мой взгляд, наиболее удобными являются:</p>
                 <ol class="decimal">
                  <li>Новый (New (Open)) - статус, присваиваемый только что составленному отчету о проблеме.</li>
                  <li>В работе (In process) - статус, говорящий о том, что в настоящий момент идет работа по исправлению (или принятию иного решения).</li>
                  <li>Исправлено (Fixed (Added)) - описанная ошибка исправлена, необходима проверка исправления.</li>
                  <li>Переделать (Re-do (Re-open)) - в ходе проверки исправления баг обнаружен повторно.</li>
                  <li>Закрыто (Closed (Verified)) - описанная ошибка проверена, исправление действительно имеет место, дальнейшая работа над описанным в рапорте багом остановлена.</li>
                  <li>Отложено (Deffered) - исправление отложено на неопределенный срок.</li>
                 </ol>
                <p class="text">Хочу заметить, что выше перечисленные статусы составлены для систем, в которых отсутствует пункт  Резолюция, что может быть не совсем удобно.</p>
                <p class="text">Более подробно о состояниях можно почитать на сайте в разделах <a href="/Articles/Status2.aspx">Статьи. Состояния багов.</a> и <a href="/Articles/Status.aspx">Статьи. К вопросу о ведении базы.</a></p>
                <p class="text">Сэм Канер с соавторами в упомянутой выше книге рекомендуют несколько иные состояния:</p>
                 <ol class="decimal">
                  <li>Открыто - статус только что написанного отчета.</li>
                  <li>Решено - принято решение по проблеме, результат которого описан в графе Резолюция.</li>
                  <li>Закрыто - выставляется после исправления ошибки или принятия решения, не требующего дальнейшей работы с отчетом.</li>
                 </ol>
                <p class="text">При этом автор пишет: "В некоторых компаниях используют три варианта состояния вопроса: Открыто, Закрыто и Решено. Программисты ищут в базе данных отчеты по состоянию Открыто, а тестировщики по состоянию Решено. В нашей системе программисты ищут отчеты по резолюции Рассматривается, а тестировщики по состоянию Открыто с любыми резолюциями, кроме Рассматривается."</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - выбирается из списка доступных статусов.</p>
                <p class="text">Вносится - тестировщиком.</p>
                <p class="text">Модифицируется - тестировщиком (New, Re-do (Re-open), Closed (Verified)); программистом (В работе (In process), Исправлено (Fixed (Added))); руководителем проекта или менеджером (в зависимости от роли в проекте список доступных статусов может различаться. Например, тестировщик не может  выставлять статус "исправлено", а программист - выставлять статус "закрыто").</p>

        <p class="text"><a name=prbt></a><H3>Тип отчета (Problem type).</H3></p>
                <p class="text">Данная графа в системах трекинга, которые мне довелось видеть, не встречалась. Тем не менее она достаточно важна, так как очень часто параметры этого пункта приходится добавлять в другие (например, Suggestion и Question в пункте Severity). В этой графе указывают тип обнаруженной проблемы.</p>
                <p class="text">Сем Канер с соавторами предлагают следующие типы отчета для использования в системах трекинга:<br>
                 "1. Ошибка кодирования. Программа ведет себя не так, как должна по мнению тестировщика. Например, если программа утверждает, что 2+2=3, то это явная ошибка кодирования. Программист же в ответ на отчет о такой ошибке вполне может написать Соответствует проекту.<br>
                 2. Ошибка проектирования. Программа соответствует проектной документации, но в определенном вопросе тестировщик с этой документацией не согласен. Так особенно часто случается с элементами пользовательского интерфейса. На отчете данного типа программист не может написать Соответствует проекту, и если он считает, что проект верен, тогда он пишет Не согласен с предложением.<br>
                 3. Предложение. Отчет такого типа не означает, что в программе что-то не так. В нем описывается идея, реализация которой, по мнению тестировщика, может улучшить программу.<br>
                 4. Расхождение с документацией. Программа ведет себя не так, как описано в руководстве или интерактивной справке. В этом случае в отчете следует указать, в каком именно документе и на какой странице найдено несоответствие. При этом в отчете вовсе не утверждается, что ошибка именно в документации, а не в самой программе. Отчеты о расхождении с документацией обязательно должны совместно рассматриваться программистом и автором документации. О функциях программы, которые вообще нигде не описаны, так же следует составлять отчеты данного типа.<br>
                 5. Взаимодействие с аппаратурой. Проблемы этого рода связаны с неудачным взаимодействием программы и определенного вида аппаратного обеспечения. Если причина неудачи заключается в неисправности устройства, отчет о ней составлять не нужно. Однако если программа не может работать ни с одной платой или устройством конкретного типа - это уже проблема, которую следует документировать.<br>
                 6. Вопрос. Программа делает что-то, чего тестировщик не ожидает или не понимает. Отчет-вопрос стоит составить при любых сомнениях. Если они окажутся основанными на действительной ошибке, программист ее исправит. Если же программист откажется исправить ошибку или его объяснение не покажется вам достаточно разумным, можно будет составить отчет об ошибке проектирования".
                </p>
                <p class="text">Некоторые системы трекинга позволяют создавать не только свои собственные параметры для отдельных полей отчета, но и сами поля. В любом случае лучше не смешивать параметры разных полей, как это сделано выше для поля Severity (Question и Suggestion). Это несколько запутывает и усложняет понимание системы в целом. Тем не менее многое зависит не только от используемой системы трекинга, но и от организации процесса отслеживания проблем и разработке в целом. И Question, и Suggestion вполне могут быть расценены как степени серьезности проблемы, что, на мой взгляд, не совсем верно.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - выбирается из списка доступных типов.</p>
                <p class="text">Вносится и модифицируется - тестировщиком.</p>

        <p class="text"><a name=rcrr></a><H3>Повторяемость (Recurrence).</H3></p>
                <p class="text">Данная графа отчета является ответом на вопрос "Можете ли Вы воспроизвести проблему?" Т.е. стабильно ли при проведении данного теста проявляется описываемая ошибка. Вариантами ответа могут быть (по Канеру):</p>
                 <ol class="decimal">
                  <li>Да -  описываемая проблема при повторном проведении теста проявляется стабильно на том же самом шаге.</li>
                  <li>Нет - баг возник однократно и тестровщику не удается получить эту ошибку еще раз. Т.е. не известно как ее воспроизвести.</li>
                  <li>Не всегда - проблема при проведении одних и тех же шагов возникает непостоянно или не на том шаге, т.е. вызывается не стабильно, но достаточно часто.</li>
                 </ol>
                <p class="text">При составлении отчета не воспроизводимые ошибки следует вносить в базу с особой тщательностью, т.к. опытный программист уже на основании Вашего описания может предположить место в коде и исправить найденную ошибку. Тем не менее при возникновении дополнительных данных они обязательно д.б. внесены в отчет.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - значение выбирается из списка.</p>
                <p class="text">Вносится и модифицируется - тестировщиком.</p>

        <p class="text"><a name=iden></a><H3>Идентификатор (Identifier).</H3></p>
                <p class="text">Уникальный идентификатор сообщения об ошибке. Может использоваться только один раз в системе. Как правило, в идентификаторе часто используют сочетание букв и цифр, где буквы - аббревиатура названия тестируемой программы, а цифры - уникальный номер бага (отчета о проблеме).</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - значение присваивается автоматически.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - после сохранения сообщения в базе данных - не модифицируется.</p>

        <p class="text"><a name=desc></a><H3>Краткое описание (Description).</H3></p>
                <p class="text">Сжатое описание сути проблемы. Это описание используется для идентификации бага в базе данных (как и его ID), а также в различного вида отчетах и рапортах о проделанной работе. Более подробное описание и указания, как воспроизвести проблему описываются в других графах отчета. Краткая формулировка очень важна, т.к. по ней могут судить о важности проблемы. Кроме того, даже в случае схожих проблем, для которых составляются отдельные отчеты - Description должен быть разный.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - как правило после сохранения сообщения в базе данных - не модифицируется.</p>

        <p class="text"><a name=rprt></a><H3>Детальное описание (Report).</H3></p>
                <p class="text">Подробное описание проблемы. Чем подробнее будет описано, в чем именно состоит проблема, тем легче локализовать и исправить баг. Однако чрезмерная информация может также затруднить понимание, как и ее нехватка. В части систем трекинга данное поле используется и для описания шагов воспроизведения, и для указания наличия обходного пути, и для описания аппаратной/программной конфигурации, в которой данная проблема возникает. На мой взгляд, для этого лучше отводить отдельные поля.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - как правило после сохранения сообщения в базе данных - не модифицируется.</p>

        <p class="text"><a name=sttr></a><H3>Шаги воспроизведения (Step to recreate).</H3></p>
                <p class="text">В данной графе подробно, по шагам описывается, что именно нужно делать, чтобы воспроизвести проблему. Это поле очень важно, т.к. при его написании тестировщик имеет возможность прежде всего для себя уяснить стабильна ли возникающая ошибка, а программист сможет воспроизвести проблему у себя, что в свою очередь может существенно облегчить локализацию,  следовательно и исправление найденной ошибки. Кроме того это поле понадобится тестировщику и в дальнейшем - для перепроверки сделанного исправления.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - тестировщиком. Для дальнейших записей может использоваться поле Комментарий (см. ниже).</p>

        <p class="text"><a name=work></a><H3>Обходной путь (Workaround).</H3></p>
                <p class="text">Путь разрешения проблемы. Т.е. в данной графе указывается есть ли Workaround, и описываются шаги. Например, если после закрытия диалогового окна оно всплывает вновь, то имеет место баг. При этом, после 10 нажатия закрытия окна оно наконец-то действительно закрывается. Эти 10 нажатий в данном случае и будут шагами Workaround данной проблемы.</p>
                <p class="text">Более подробно о Workaround можно почитать на сайте в разделе <a href="/School/SeverityOfABug.aspx">Школа. Классификация багов.</a></p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - тестировщиком. Для дальнейших записей может использоваться поле Комментарий (см. ниже).</p>

        <p class="text"><a name=conf></a><H3>Конфигурация (Configuration).</H3></p>
                <p class="text">В данной графе описывается в какой аппаратной и/или программной конфигурации обнаружена описываемая проблема. В качестве вводимых данных могут использоваться как заранее "зарезервированные" названия конфигураций, так и их подробное описание. Глубина описания может варьироваться в зависимости от нужд или быть строго стандартизированной. Знание конфигурации может существенно облегчить локализацию бага или быть решающим моментом для воспроизведения отчета как программистом так и тестировщиком, особенно для тех отчетов, тип которых определен как "Взаимодействие с аппаратурой" (см).</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации или список с заранее введенными значениями.</p>
                <p class="text">Вносится  - тестировщиком.</p>
                <p class="text">Модифицируется - тестировщиком. Для дальнейших записей может использоваться поле Комментарий (см. ниже).</p>

        <p class="text"><a name=atta></a><H3>Аттачмент (приложения) (Attachment).</H3></p>
                <p class="text">В данной графе указываются все материалы, приложенные к рапорту. Цель этих материалов - облегчить понимание, локализацию и исправление найденной ошибки. К таким материалам можно отнести логи, снимки с экрана и т.п. При описании материалов указывается их название, содержание и комментарии, а так же путь к ним (или метод получения). В ряде систем трекинга предусмотрено автоматическое копирование приложений в единый каталог доступный для использования другими членами команды или для закачки их по FTP.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации с возможностью ссылок не месторасположение соответствующего метериала.</p>
                <p class="text">Вносится и модифицируется - как правило тестировщиком.</p>

        <p class="text"><a name=dlgt></a><H3>Поручено (Delegated).</H3></p>
                <p class="text">Графа, представляющая собой имя лица, которому поручена дальнейшая работа над описанной проблемой. Таким лицом может быть, например, разработчик, который будет исправлять ошибку (как правило тот, кто ее и допустил) или тестировщик, который ее обнаружил (например, в случае когда ошибка исправлена и требуется перепроверка исправления).</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - список с заранее введенными значениями.</p>
                <p class="text">Вносится и модифицируется - как правило уполномоченным лицом (например руководителем проекта или менеджером).</p>

        <p class="text"><a name=comm></a><H3>Комментарии (Comments).</H3></p>
                <p class="text">Это поле служит для внесения комментариев от различных членов команды на протяжении всего жизненного цикла бага. Здесь могут описываться дополнительные данные не вошедшие в основные графы отчета, вопросы, уточнения и т.д. В некоторых системах трекига, кроме Комментариев может использоваться дополнительное поле То-do, которое представляет собой список того, что необходимо сделать при работе с данным багом и может служить своеобразным планировщиком работ для любого члена команды, имеющего доступ к системе трекинга.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации с возможностью автоматического внесения даты, времени и ФИО лица, вносящего комментарий.</p>
                <p class="text">Вносится и модифицируется - всеми членами команды имеющими доступ к системе трекинга...</p>

        <p class="text"><a name=rslt></a><H3>Резолюция (Resolution).</H3></p>
                <p class="text">Пункт представляющий собой комментарий разработчика или другого лица, принявшего участие в исправлении бага. Служит основой для тестировщика при дальнейшей работе над багом. Данное поле так же может использоваться при откладывании исправления на неопределенный срок уполномоченным для этого лицом.</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации с возможностью автоматического внесения даты, времени и ФИО лица, вносящего комментарий.</p>
                <p class="text">Вносится и модифицируется - членами команды участвующими в исправлении (принятии решения о дальнейшей судьбе рапорта)...</p>

        <p class="text"><a name=deff></a><H3>Отложено (Deffered).</H3></p>
                <p class="text">Графа, заполняемая в случае, если исправление описанной в рапорте ошибки откладывается по целому ряду причин. Может содержать несколько полей ввода, позволяющих помимо отметки об "отложенности" описывать также кем и по какой причине было отложено исправление, будет ли исправлено и когда именно (дата, версия).</p>
                <p class="text">В бумажной версии - заполняется соответствующий пункт отчета.</p>
                <p class="text">В электронной - представляет собой текстовое поле для ввода информации с возможностью автоматического внесения даты, времени и ФИО лица, отложившего исправление.</p>
                <p class="text">Вносится и модифицируется - уполномоченным лицом (руководителем проекта или менеджером).</p>

        <p class="text"><a name=notf></a><H3>Подпись (нотификация для электронного варианта) (Signature/Notify).</H3></p>
                <p class="text">В бумажной версии - подпись лица составившего отчет.</p>
                <p class="text">Представляет собой запись об отправке нотификации (уведомления) с указанием времени, даты и ФИО получателя. </p>
                <p class="text">В бумажной версии - графа, заполняемая составителем отчета.</p>
                <p class="text">В электронной - поле с описанной информацией.</p>
                <p class="text">Вносится и модифицируется в бумажном варианте - составителем отчета, а в электронном - системой трекинга (автоматически).</p>

        <p class="text"><a name=hist></a><H3>История (History).</H3></p>
                <p class="text">Полная история всех изменений начиная с момента внесения отчета в базу данных. Включает в себя время и дату модификации, ФИО (ник, логин) лица изменившего любой пункт отчета и вид изменений.</p>
                <p class="text">В бумажной версии - отсутствует.</p>
                <p class="text">В электронной - поле с описанной информацией.</p>
                <p class="text">Вносится и модифицируется в электронном варианте - системой трекинга (автоматически).</p>

        <p class="text"><a name=></a><H3></H3></p>
                <p class="text"></p>
                <p class="text"></p>
                <p class="text"></p>
                <p class="text"></p>
                <p class="text"></p>


        <p class="text">Кроме используемого в данной статье синонимов понятия "баг" существует еще один - Issue (проблема). Этот термин можно рассматривать и как синоним понятия баг,  и как более широкое понятие, обозначающее не только понятие "проблема", но и предложение по улучшению - "Feature request". О другом синониме Feature request уже было упомянуто выше - Enhancement (улучшение). Многие современные системы трекинга используют именно эти понятия и могут быть использованы как для трекинга багов, так и для отслеживания требований по улучшению программы. На мой взгляд, практика разделения сообщений на эти две группы существенно облегчает работу с системой.</p>
        <p class="text">Поля и правила составления Feature request практически не отличаются от таковых для bug report. Некоторые из описанных выше полей могут не использоваться при составлении Feature request (например, Повторяемость, Обходной путь и т.д.).</p>
        <p class="text">О том, каким должен быть отчет о проблеме и на что нужно обращать внимание при его составлении - в следующей статье этого цикла.</p><br>
	<p class="sub2_top">
	См. также: <br />
		<a class="sub2_top" href="/Articles/Status2.aspx" target="_blank">  Гущин Павел. Состояния багов.</a> <br />
		<a class="sub2_top" href="/School/SeverityOfABug.aspx" target="_blank">  Михаил Портнов. Классификация багов.</a><br /> 	 
		<a class="sub2_top" href="/Articles/Status.aspx" target="_blank">  К вопросу о ведении базы.</a><br />
		<a class="sub2_top" href="/FAQ/1.aspx" target="_blank">  FAQ. Что такое баг? Синонимы понятия...</a><br />
		<a class="sub2_top" href="/Theory/Testing/Tr2Krit.aspx" target="_blank">  Трекинг. Часть II. Критерии хорошего отчета.</a><br />
	</p>
	<br />
</asp:Content>

